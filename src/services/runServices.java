/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package services;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import static java.lang.Thread.sleep;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Администратор
 */
public class runServices extends javax.swing.JFrame {
    String dir = "";
    String os;
    String ipAddress = "10.10.2.1";
    /**
     * Creates new form runServices
     */
    public runServices() throws IOException, InterruptedException {
        os = System.getProperty("os.name").toLowerCase(); 
        initComponents();
        initPath();
        scanBrowsers();
        startVPN();
        
       // close();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(runServices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(runServices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(runServices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(runServices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new runServices().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(runServices.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InterruptedException ex) {
                    Logger.getLogger(runServices.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    private void initPath(){
        dir = System.getProperty("user.dir");
        jTextArea1.append(dir+"\n");
    }
    
    // Start vpn service
    private void startVPN() throws IOException, InterruptedException{
     try{
        if (os.contains("win")) {
            startVPNwin();
        } else if (os.contains("mac")) {
            startVPNmac();    
        }else if (os.contains("nix") || os.contains("nux")) {       
           startVPNnix();
        }    
      } catch (Exception e) {
            e.printStackTrace();
      }
     //------------------
      jTextArea1.append("\n");
       // String ipAddress = "10.10.2.6";
        InetAddress inet = InetAddress.getByName(ipAddress);
        int i1 = 0;
        // проверяем наличие vpn и доступ  к серверу приложений
        while (!inet.isReachable(1000)){
            jTextArea1.append(String.valueOf(i1++)  +"\n");
        }
        Enumeration e = NetworkInterface.getNetworkInterfaces();
        // Gbitv IP в окно для тестирования
        while(e.hasMoreElements())
        {
            NetworkInterface n = (NetworkInterface) e.nextElement();
            Enumeration ee = n.getInetAddresses();
            while (ee.hasMoreElements())
            {
                InetAddress i = (InetAddress) ee.nextElement();
                System.out.println(i.getHostAddress());
                addStrToFom(i.getHostAddress());
            }
        }
      //-----------------------------
    }
    
    // Rescan browserspath  ---  powershell -executionpolicy RemoteSigned -file   fconfig\file-list-main.ps1
    // Ищем местонахождение браузеров
    private void scanBrowsers() throws IOException, InterruptedException{
        try {
            if (os.contains("win")) {
                String infile =  dir + ("\\fconfig\\programs-list-main.txt");
                String cmd = "powershell";
                String path  = dir + ("\\fconfig\\file-list-main.ps1");
                String param1  =  "-executionpolicy";
                String param2 = "RemoteSigned";
                String param3 =  "-file";
                int i = 0;
                if (!fileExists(infile)){
                    ProcessBuilder builder = new ProcessBuilder(cmd,param1,param2,param3 ,path);
                    builder.redirectErrorStream(true);
                    final Process process = builder.start();
                    // Watch the process
                    watch(process);
                }
            } else if (os.contains("mac")) {
                
            }else if (os.contains("nix") || os.contains("nux")) {
                
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    // Stop vpn service
    public static void stopVPN() throws IOException{
        Process proc = Runtime.getRuntime().exec("taskkill.exe /F /IM openvpn.exe");
        InputStream in = proc.getInputStream();

    }
    
        //Обработка сообщений ProcessBuilder
    private static void watch(final Process process) {
    new Thread() {
        public void run() {
            BufferedReader input = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line = ""; 
            try {
                while ((line = input.readLine()) != null) {
                    System.out.println(line);
                }
            } catch (IOException e) {
                //e.printStackTrace();
            }
        }
    }.start();
}
    
    public  void close() throws IOException{
        stopVPN();
        this.setVisible(false);
        dispose();
    }
    
    public static boolean fileExists(String n){
    return (new File(n)).exists();
}
    
    public void addStrToFom(String tstr){
        jTextArea1.append(tstr+"\n");
    }
    
    public void startVPNwin() throws IOException{
        String path  = dir + ("\\ovpn\\openvpn.exe");
        String param1  =  "--config";
        String config = dir + "\\ovpn\\client.ovpn";
        ProcessBuilder builder = new ProcessBuilder(path,param1, config);
        builder.redirectErrorStream(true);
        final Process process = builder.start();
                // Watch the process
        watch(process);
        
        
    }
    /*
    Создавать сетевое устройство при необходимости
    vi /scripts/tun.sh
    /bin/mkdir /dev/net
    /bin/mknod /dev/net/tun c 10 200
    проверка tun
    modprobe tun
    sudo killall openvpn

    */
    public void startVPNnix() throws IOException{
        String path  = ("openvpn");
        String param1  =  "--config";
        String config = "ovpn/client.ovpn"; 
        StringBuilder cmd = new StringBuilder();
        Runtime rt = Runtime.getRuntime();
        //cmd.append("");
        String sss = "sudo openvpn --config ovpn/client.ovpn";
        //String[] cmd = {"/bin/bash","-c","echo password| sudo -S ls"};
        String[] cmd1 = {"/bin/bash","-c","echo \"password\"| sudo -S openvpn "
                + "--config ovpn/client.ovpn"};
        //String[] cmdl = new String[]{"sudo",path,param1 , config};
        rt.exec(cmd1);

    }
    /*
    Runtime.getRuntime.exec("open appname.app")
    */
    public void startVPNmac(){

    }
    
    
    
}
